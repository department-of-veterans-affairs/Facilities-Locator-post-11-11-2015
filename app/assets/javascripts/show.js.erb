$( document ).ready(function() {  
  L.mapbox.accessToken = 'pk.eyJ1IjoiYXlhbGVsb2VociIsImEiOiJjaWtmdnA1MHAwMDN4dHdtMnBqbGR3djJxIn0.fuqVOKCu8mE-9IdxTa4R8g';
  var geocoder = L.mapbox.geocoder('mapbox.places');
  var map = L.mapbox.map('map', 'mapbox.streets')
        .setView([38.8, -95.50], 5);
  map.scrollWheelZoom.disable();

  var parameters = {};
  var URL = window.location.href;
  var markerData = [];
  var markers_on_map = false;
  var shown = [];
  var shownIndex = 0; 
  search_center_lat = -1;
  search_center_lng = -1;
  
  if (URL.includes("Location=")) {
    var location = URL.substring(URL.indexOf("Location=") + 9, URL.indexOf('&')).replace(/%20/g, ' ')
    $('#search_location').val(location);
    geocoder.query(location, showMap);
  } else if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(recenter);
  }

  if (URL.includes("administration")) {
    var administration = get_string_from_url(URL, "administration");
    $('#administration_selection').val(administration);
    parameters["administration"] = administration;
    $.ajax({
        url: '/service_types_by_administration',
        type: 'GET',
        data: parameters,
        dataType: "json",
        success: function(data){
            fill_service_level(data, 'service_level_1_selection');
        },
        failure: function(data){
            alert(data);
        }
    });
  }
  if(URL.includes("service_level_1")) {
    var service_level_1 = get_string_from_url(URL, "service_level_1");
    
    $('#service_level_1_selection').show();
    parameters["service_level_1"] = service_level_1;
    $.ajax({
        url: '/service_level_2',
        type: 'GET',
        data: parameters,
        dataType: "json",
        success: function(data){
            fill_service_level(data, 'service_level_2_selection');
        },
        failure: function(data){
            alert(data);
        }
    });
  } 
  if(URL.includes("service_level_2")) {
    var service_level_2 = get_string_from_url(URL, "service_level_2")
    $('#service_level_2_selection').val(service_level_2);
    parameters["service_level_2"] = service_level_2;
  }
  
  $.ajax({
      url: '/search/show',
      type: 'GET',
      data: parameters,
      dataType: "json",
      success: function(data){
          plotData(data, map);
      },
      failure: function(data){
          alert(data);
      }
  });
  

  function showMap(err, data) {
    // The geocoder can return an area, like a city, or a
    // point, like an address. Here we handle both cases,
    // by fitting the map bounds to an area or zooming to a point.
    if (data.latlng) {
        map.setView([data.latlng[0], data.latlng[1]], 10);
    }
    search_center_lat = data.latlng[0];
    search_center_lng = data.latlng[1];
    
    var geojson = [
    {
      "type": "Feature",
      "geometry": {
        "type": "Point",
        "coordinates": [search_center_lng,search_center_lat]
      },
      "properties": {
        "title": "Your Location",
        "marker-color": "#e31c3d",
        "marker-size": "small",
        "marker-symbol": "star"
      }
    }];
    var myLayer = L.mapbox.featureLayer().setGeoJSON(geojson).addTo(map);
  } 

  // Clear the facilities list
  $("#facilitiesList").html("");
  
  function recenter(position) {
    map.setView([
      position.coords.latitude,
      position.coords.longitude
    ],10);
    if(search_location.value == "") {
      geocoder.reverseQuery([position.coords.longitude, position.coords.latitude], fill_location_search_box);
    }
  }
  
  function fill_location_search_box(err, data) {
    search_location.value = data.features[0].place_name
  }
  
  //plot data on the map
  function plotData(data, map){
    //remove points from map
   for (var i = 0; i < data.length; i++) {
     if (isNaN(parseFloat(data[i]['longitude'])) || isNaN(parseFloat(data[i]['latitude']))) {
       continue;
     }
      
    var marker = L.marker(new L.LatLng(data[i]['latitude'], data[i]['longitude']));
      
    var phone_number = data[i]['station_phone_number'];
    if(phone_number != null && phone_number.charAt(phone_number.length - 1) == 'x') {
      data[i]['station_phone_number'] = phone_number.substring(0, phone_number.length - 1);
    }
                 
    var driving_directions_url = "https://www.google.com/maps/dir/" + $('#search_location').val() + 
          "/" + data[i]['street_address'] + " ";
    if (data[i]['suite_building_number'] != null) {
      driving_directions_url += data[i]['suite_building_number'] + " ";
    }
    driving_directions_url += data[i]['city'] + " " + data[i]['state'] + " " + data[i]['zip_code'];
    var content = '<span class="bubble-title">' + data[i]['location_descriptive_name_common_name'] + 
          '</span>' + '<br>' + data[i]['classification'] + '<br>' + data[i]['station_phone_number'] + 
          '<br>' + '<a class="facilityLink" href="/single_facility/' + data[i]['facility_id'] + 
          '">Facility Details</a>  |  <a target="_blank" href="' + driving_directions_url + '">Driving Directions</a><br>\n';
    
    var geojson = create_marker(data[i], content);
    var myLayer = L.mapbox.featureLayer().setGeoJSON(geojson).addTo(map);
    markerData.push(data[i]);
  }
  markers_on_map = true;
  update_facility_list();
    
}
  
  function create_marker(facility, content) {
    var color = "#112e51";
    if(facility['classification'] == "VA Medical Center (VAMC)") {
      color = "#0071bc";
    } else if (facility['classification'] == "Residential Care Site (MH RRTP/DRRTP) (Stand-Alone)") {
      color = "#205493";
    } else if (facility['classification'] == "Extended Care Site (Community Living Center) (Stand-Alone)") {
      color = "#112e51";
    }
    
    return [
    {
      "type": "Feature",
      "geometry": {
        "type": "Point",
        "coordinates": [facility['longitude'], facility['latitude']]
      },
      "properties": {
        "title": content,
        "marker-color": color,
        "marker-size": "medium",
        "marker-symbol": "hospital"
      }
    }];
  }
  
  function facilityHTML(facility) {
    if(facility.station_phone_number != undefined) {
      var title = '<span class="facilityTitle">' + facility.location_descriptive_name_common_name + '</span>';
      
      return title + '<br>\n<span class="address">' + facility.street_address + "<br>\n" + facility.city + ", " + facility.state + " " + facility.zip_code + '</span><br>\n' +
        facility.station_phone_number + "<br>\n"
        + '<a class="facilityLink" href="/single_facility/' + facility.facility_id + '">Facility Details</a><br>\n';
    }
  }

  map.on('moveend', function() {
    update_facility_list();
  });
  
  function update_facility_list() {
    $("#facilitiesList").html("");
    shown = [];
    shownIndex = 0;
    if (markers_on_map) {
      var bounds = map.getBounds();
      
      var directions_URL_beginning = 'https://api.mapbox.com/v4/directions/mapbox.driving/';
      var directions_URL_ending = '.json?access_token=' + L.mapbox.accessToken;
          
          
      for(var i = 0; i < markerData.length; i++) {
        var lat_lng = L.latLng(markerData[i]['latitude'], markerData[i]['longitude']);
        if (bounds.contains(lat_lng)) {
          var center = map.getCenter();
          shown.push(markerData[i]);
          
          var directionsUrl = directions_URL_beginning;
          if(search_center_lng == -1 || search_center_lat == -1) {
            directionsUrl += center.lng + ',' + center.lat;
          } else {
            directionsUrl += search_center_lng + ',' + search_center_lat;
          }
          directionsUrl += ';' + markerData[i]['longitude'] + ',' +  markerData[i]['latitude'] + directions_URL_ending;
          $.ajax({
            url: directionsUrl,
            type: 'GET',
            success: function(data) { list_facilities(data); }
          });
        }
      }
    }
  }
  
  function list_facilities(data) {
    var distance = meters_to_miles(data.routes[0].distance);
    //;
    for(var i = 0; i < shown.length; i++) {
      if(Math.abs(data.destination.geometry.coordinates[0] - parseFloat(shown[i]['longitude'])) < 0.0001 &&
            Math.abs(data.destination.geometry.coordinates[1] - parseFloat(shown[i]['latitude'])) < 0.0001) {
        var li = "<li>" + facilityHTML(shown[i])  + 
                      '<span class="distance">Driving Distance: ' + distance + " miles</span></li>";
        $("#facilitiesList").append(li);
        break;
      }
    }
  }
});

// Convert meters to miles
function meters_to_miles(meters) {
  return round10(meters / 1609.344);
}

function round10(n) {
    return Math.round(n*10) / 10;
}

function get_string_from_url(URL, substring_to_find) {
  var string_to_return = URL.substring(URL.indexOf(substring_to_find+"=") + substring_to_find.length + 1);
  if(string_to_return.indexOf("&") > -1 ) {
    string_to_return = string_to_return.substring(0, string_to_return.indexOf("&"))
  }
  return string_to_return.replace(/%20/g, ' ');
}